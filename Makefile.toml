[config]
additional_profiles = ["github_actions"]

[env]
LLVM_PROFILE_FILE = "coverage.profraw"

[env.development] # The default profile is "development" when no profile is specified
RUSTFLAGS = "-Zinstrument-coverage" # This is required in order to create code coverage reports

[env.github_actions]
RUSTFLAGS = "-Zinstrument-coverage" # This is required in order to create code coverage reports

[tasks.format]
description = "Format all source files."
install_crate = { rustup_component_name = "rustfmt" }
command = "cargo"
args = ["fmt"]

[tasks.lint]
description = "Lint all source files."
install_crate = { rustup_component_name = "clippy" }
command = "cargo"
args = ["clippy"]

[tasks.lint-watch]
description = "Monitor and lint all source files continuously anytime one of them changes."
dependencies = ["lint"]
watch = true

[tasks.clean]
description = "Clean up temporary files generated by the Rust compiler."
command = "cargo"
args = ["clean"]

[tasks.build]
description = "Compile the source code and create testable artifacts."
command = "cargo"
args = ["build"]
dependencies = ["lint"]

[tasks.test]
description = "Run all unit tests."
install_crate = { rustup_component_name = "llvm-tools-preview" }
command = "cargo"
args = ["test", "--tests"]
dependencies = ["build"]

[tasks.generate-profdata]
description = "Translate the raw profile file (.profraw) into a profile data file (.profdata)."
install_crate = "cargo-binutils" # Enables the "cargo cov" and "cargo profdata" commands
command = "cargo"
args = [
    "profdata", "--", "merge", # Calls llvm-profdata's "merge" command internally (llvm-profdata merge)
    "-sparse",
    "coverage.profraw",
    "-o", "coverage.profdata"
]
dependencies = ["test"] # Because we need the .profraw file to be generated by llvm-tools

[tasks.linux-coverage]
condition = { platforms = ["linux"] }
script_runner = "bash"
script_extension = "sh"
script = { file = "scripts/linux-coverage-helper.sh" }
dependencies = ["generate-profdata"]

[tasks.windows-coverage]
condition = { platforms = ["windows"] }
script_runner = "powershell"
script_extension = "ps1"
script = { file = "scripts/windows-coverage-helper.ps1" }
dependencies = ["generate-profdata"]

[tasks.test-coverage]
description = "Run code coverage analysis and write a tabulated report to STDOUT."
linux_alias = "linux-coverage"
windows_alias = "windows-coverage"
